# Muuttujat ja vektorit {#sec-variables_and_vectors}

## Muuttujat

**Muuttujat** (*variables*) ovat yksi tärkeimmistä ohjelmointikielien rakenteista. Muuttujien tehtävä on säilyttää tietoa ja tuloksia edellisistä laskutoimituksista. Alla on yksinkertainen esimerkki muuttujien käytöstä R:ssä.

```{r}
x <- 3
y <- 5
z <- x + y
z
```

Edellisessä esimerkissä **sijoitetaan** (*assign*) eli tallennetaan muuttujaan `x` arvo 3 ja muuttujaan `y` arvo 5. Sen jälkeen muuttujien `x` ja `y` summa sijoitetaan muuttujaan `z`, jonka jälkeen tulostetaan muuttujan `z` arvo. Symboli `<-` on R:n **sijoitusoperaattori** (*assignment operator*) (myös yhtä kuin-merkki `=` toimii melkein aina, mutta `<-` merkin käyttöä suositellaan vahvasti). Sijoitusoperaattori kertoo R:lle, että symbolin `<-` vasemmalle puolelle sijoitetaan sen oikean puolen laskutoimituksen tulos. Vasen puoli määrittää muuttujan nimen

Mutta miten muuttujan `z` arvo tulostui konsoliin, vaikka koodissa ei käytetty funktiota `print`? R:n erikoisominaisuus moneen muuhun ohjelmointikieleen verrattuna on se, että print-käskyä ei tarvitse aina kirjoittaa, vaan pelkästään muuttujan (tai laskutoimituksen) kirjoittaminen tulostaa arvon konsoliin, kuten alla oleva koodi havainnollistaa:

```{r}
z
print(z)

x + y
print(x + y)

3 + 5
print(3 + 5)
```

Muuttujiin voi sijoittaa muutakin kuin yksittäisiä lukuja, kuten merkkijonoja (strings), vektoreita, tai paljon monimutkaisempiakin rakenteita.

```{r}
x <- "Hello world"
x
```

## Kommentit

Myöhemmin vastaan tulevassa koodissa käytetään kommentteja. Kommentit ovat koodin oheen kirjoitettua tekstiä, joka ei ole ohjelmointikieltä, ja joka ohitetaan koodia ajettaessa. Kommenttien tarkoitus on kuvailla koodin toimintaa. Oman koodin kommentointia on hyvä harjoitella alusta lähtien, vaikka ensimmäisten tehtävien koodi onkin hyvin yksinkertaista. R:ssä kommentit merkataan `#`-symbolilla. Edellinen esimerkki kommentoituna voisi näyttää jotakuinkin tältä:

```{r}
# Assign arbitrary numbers to two variables
x <- 3
y <- 5
# Sum of two variables
z <- x + y
# Print the results
z
```

## Vektorit {#sec-vectors}

Nyt kun muuttujat ovat tuttuja, voimme siirtyä käsittelemään vektoreita (*vector*). R:n vektorit ovat yksinkertaisia järjestettyjä tietorakenteita, jotka koostuvat alkioista (*elements*), esimerkiksi reaaliluvuista. Alla oleva esimerkki sijoittaa muuttujaan `x` vektorin, joka sisältää 5 lukua ja tulostaa vektorin `x` sisällön konsoliin.

```{r}
x <- c(1, 2, 7.4, 15, 0.2)
x
```

Yksinkertaisin tapa tehdä vektori R:ssä on käyttää `c`-funktiota (`c` tulee sanasta *combine*), joka luo vektorin, joka sisältää sille annetut arvot annetussa järjestyksessä. Monet R-kielen komennot ja funktiot luovat vektoreita, alla muutama esimerkki:

```{r}
# Sequence from 1 to 10
seq(1, 10)
# Sequence from 0 to 1 with 0.2 intervals
seq(0, 1, by = 0.2)
# A sequence of length 6 (starting from 1 with an interval of 1)
seq_len(6)
# A sequence from 3 to 9 with an interval of 1
3:9
# Repeat the number 1 five times
rep(1, 5)
# Repeat vector c(1, 2) 3 times
rep(c(1, 2), 3)
# Repeat all values in vector c(1, 2, 3) 3 times
rep(c(1, 2, 3), 3) 
```
Erityisesti usein hyödyllisiä funktiota ovat `seq`, jolla voidaan luoda lukujonoja halutulla tiheydellä, sekä `rep`, joka toistaa sille annettun luvun tai vektorin halutun monta kertaa.


### Vektorilaskentaa

Vektoreilla laskeminen on usein hyvin intuitiivista (lisää vaaranpaikoista myöhemmin). Kun vektoriin kohdistetaan laskutoimintoja, sama operaatio tehdään kaikille vektorin alkioille. Kyseessä on ns. vektorisaatio (*vectorization*).

```{r}
x <- c(1, 2, 3, 6, 10)
x * 2
x / 2 + 1
```

Entä jos vektoreita lisää toisiinsa, tai kertoo keskenään? Jos vektorit ovat samanpituisia, operaatio toteutetaan alkio kerrallaan. Jos vektorit ovat eripituisia, R yrittää kierrättää (*recycle*) lyhyempää vektoria niin, että siitä tulee yhtä pitkä kuin pidempi vektori. Tämän jälkeen operaatio suoritetaan alkio kerrallaan (itse asiassa näin tapahtui myös aiemmissa esimerkeissä, kun vektori kerrottiin yksittäisellä luvulla. R:ssä yksittäiset luvut ovat vektoreita, joiden pituus on 1). Jos kierrätys ei onnistu, eli pidemmän vektorin pituus ei ole jaollinen lyhyemmän pituudella, R antaa virheilmoituksen. 

```{r}
x <- c(1, 2, 3, 6, 10, 2)
y <- c(1, 1, 1, 3, 3, 3) # or rep(c(1, 3), each = 3)
z <- c(2, 4)

x + y # Element-wise sum
x * y # Element-wise multiplication

x + z

```

R:ssä on myös paljon funktioita, joilla voi laskea vektoreista erilaisia tunnuslukuja, kuten keskiarvon, mediaanin, keskihajonnan, pituuden, ym. 

```{r}
x <- c(1, 2, 3, 6, 10, 2)
# Sample mean (average)
mean(x)
# Standard deviation
sd(x)
# Sum
sum(x)
# length
length(x)
```

### Ei-numeeriset vektorit

#### Merkkijonovektorit

Vektorien ei ole pakko sisältää lukuja. Vektorit voivat sisältää esimerkiksi merkkijonoja, kuten alussa nähty "Hello, world!". Merkkijonotyypin nimi R:ssä on `character`.

```{r}
x <- c("Hello, world!", "R is the best", "I", "like", "programming", "!")
x
```

Merkkijonovektoreiden muokkausta varten on omia funktiota, tärkeimpinä `paste` ja `paste0`, jotka yhdistävät merkkijonoja toisiinsa. Myös numeerisia vektoreita voi antaa näille funktioille, ja ne muutetaan merkkijonoiksi.

```{r}
first_names <- c("Diana", "Peter", "Bruce")
last_names <- c("Prince", "Parker", "Wayne")
paste(first_names, last_names)

students <- paste0("Student_", 1:5)
```

#### Loogiset vektorit

Kolmas yleinen vektorityyppi on looginen vektori, joka sisältää arvoja `TRUE` eli tosi tai `FALSE` eli epätosi. Loogisia vektoreita käytetään yleensä joko merkitsemään binäärisiä muuttuja (esimerkiksi paastosiko koehenkilö ennen näytteenottoa) tai vektorien ja matriisien indeksoinnissa (tästä lisää pian). Tyypillinen käyttötarkoitus loogisille vektoreille on poimia aineistosta havainnot, jotka täyttävät tietyt ehdot. Tällöin loogisia vektoreita syntyy erilaisten loogisten operaattorien avulla:

```{r}
x <- c(1, 2, 3, 6, 10, 2)

x > 3 # Is the element of x greater than 3?
x >= 3 # Greater or equal to three=
x == 6 # Equal to 6?
x != 2 # Not equal to 2?
```

#### Loogiset vektorit ja matematiikka

Jos loogiselle vektorille tekee operaation, joka odottaa numeerista vektoria, R muuttaa automaattisesti arvot `TRUE` ykkösiksi ja arvot `FALSE` nolliksi. Tämä on erityisen hyödyllistä käytettäessä funktiota `sum`. Tällä tavalla saadaan helposti tietää esim. kuinka moni vektorin alkio täyttää tietyn ehdon:

```{r}
x <- c(1, 3, 5, 2, 19)
above_3 <- x > 3

# Logical vector automatically converted to numeric
x + 1

# how many elements of x are smaller than 10?
sum(x < 10)
```

### Vektorien indeksointi ja osajoukon valinta

Usein vektorista halutaan poimia vain tietyt arvot, esimerkiksi vain ensimmäiset 5 arvoa, tai vain arvot, jotka täyttävät tietyt ehdot. R:ssä vektorin indeksointiin käytetään hakasulkeita `[]`. Yleisin indeksointitapa on antaa hakasulkeiden sisään vektori kokonaislukuja, jotka vastaavat niiden alkioiden järjestyslukuja, jotka vektorista halutaan poimia (HUOM R:ssä indeksointi alkaa ykkösestä, ei nollasta!). Toinen vaihtoehto on käyttää loogista vektoria, jolloin vektorista poimitaan ne alkiot, joiden kohdalla loogisen vektorin arvo on `TRUE`. Tämä on yksinkertaisempaa kuin miltä se kuulostaa:

```{r}
x <- c(1, 2, 3, 6, 10, 2)

# Picking exact elements
x[2:3] # Second and third values
x[c(4, 5, 1)] # Note that the order does not have to be increasing

# Using logical vector as condition
x[x > 3]

# The condition can be based on another vector
characters <- c("Yoda", "C-3PO", "Rey", "R2-D2", "Anakin", "Baby Yoda")
heights <- c(66, 175, 170, 109, 183, 40.5)
# Only characters shorter than 120 cm
characters[heights < 120]
```

### Puuttuvat arvot

Monessa tutkimusprojektissa törmätään syystä tai toisesta jossain vaiheessa puuttuviin arvoihin. Hyvä esimerkki ovat seurantatutkimukset, jossa usein seurannan lopussa on jäljellä vähemmän koehenkilöitä kuin alussa. 

Puuttuvia arvoja merkitään R:ssä symbolilla `NA` (not available). Puuttuvat arvot noudattavat yksinkertaista logiikkaa: mikä tahansa operaatio `NA`:lle antaa tulokseksi `NA`. Funktiot, jotka operoivat vektoreilla, kuten `sum` tai `mean` voidaan erikseen asettaa poistamaan puuttuvat arvot ennen summan, keskiarvon tms. laskemista.

```{r}
missing <- c(1, 2, NA, 4, NA, 6)
full <- seq(1, 6)

# Addition with NA returns NA
missing + full
# Sum of vector with NAs returns NA
sum(missing)
# Removing NAs before summation
sum(missing, na.rm = TRUE)

```

HUOM! Funktio `is.na` tarkistaa, onko jokin arvo puuttuva sille annetussa vektorissa. Perinteinen yhtäsuuruuden testaaminen ei siis toimi. Funktio `complete.cases` muistuttaa `is.na` funktiota, mutta sitä voidaan käyttää myös kokonaisille aineistoille, jolloin se palauttaa totuusarvon `TRUE` niiden rivien kohdalla, jotka eivät sisällä lainkaan puuttuvaa tietoa yhdessäkään muuttujassa.

```{r}
# Just returns NA
NA == NA
# Returns a logical value as expected
is.na(NA)
is.na(1)

# is.na operates element-wise on a vector
missing <- c(1, 2, NA, 4, NA, 6)
is.na(missing)

# complete.cases gives the data elements which do not have missing data. 
# It can be used with data frames also.
complete.cases(missing)
```

## Extra: Alkeistietotyypit ja erikoisarvot {#sec-extra}

Tässä lisätieto-osiossa käsitellään asioita, joita et välttämättä tarvitse kurssista suoriutuaksesi. Mikäli käytät R:ää enemmän, niin vastaan tulee enemmin tai myöhemmin ongelmia, joissa tarvitsee näitä taitoja. Voit palata näihin myöhemmin koska tahansa, kun haluat syventää ymmärrystäsi R:stä.

R on rakennettu sisäisesti siten, että vektorin kukin elementti on jotain alkeistietotyyppiä. R:ssä on valmiina kuusi alkeistietotyyppiä:

 - looginen (`logical`)
 - kokonaisluku (`integer`)
 - numeerinen (eli reaaliluku, `numeric`)
 - kompleksiluku (`complex`)
 - merkkijono (`character`)
 - bitti (`raw`)

Näistä tarpeellisimpia ovat numeerinen, looginen, ja merkkijono. Kompleksilukua tarvitsee vain joissain erityistapauksissa ja kokonaisluvut ovat nykyään lähes aina tallennettu numeerisina. Bittejä, eli `raw`-tyypin vektoreita käytetään harvoin.

```{r}
# Integers are usually stored as reals
x <- c(1, 2, 3)
class(x)

# You can create integers by adding capital L behind the number
x_int <- c(1L, 2L, 3L)
class(x_int)

# Character strings (or just strings)
x_char <- c("I", "have", "a", "cat.")
class(x_char)

# Complex numbers
x_comp <- c(0i, 2 + 1i, 1 - 3i)
class(x_comp)

# Logical vector
x_logi <- c(TRUE, FALSE)
class(x_logi)

# Raw vector
x_raw <- as.raw(c(0, 1, 2))
class(x_raw)
```
Joskus vektorin tiedot ovat väärässä muodossa, esim. merkkijonoina, mutta niitä haluttaisiin käsitellä numeroarvoina. Näihin operaatioihin on omat funktionsa. Tällöin voi kuitenkin tulla ongelmia, jos muutettava vektori ei ole helposti muutettavissa haluttuun muotoon.

```{r}
# Chacter string to numeric
class(as.numeric(x_char))

# If character contains only values it is easy
x_char2 <- c("0", "5", "6.5")
as.numeric(x_char2)

# Integer to numeric
x_int_to_num <- as.numeric(x_int)
x_int_to_num
class(x_int_to_num)

# Numeric to integer
x_num_to_int <- as.integer(x)
x_num_to_int
class(x_num_to_int)
```

Vielä pari lisähuomiota puuttuvista arvoista (näitä ei tarvita usein) koskien niiden tietotyyppejä. Puuttuvalla arvolla on myös alkeistietotyyppi. Mikäli `NA`-arvon tietotyyppi tulee määritellä, niin sen voi tehdä seuraavasti. Jos luodaan muuttuja tai vektori, jossa on vain yksi arvo, joka on `NA`, niin se oletusarvoisesti looginen.
```{r}
# Specify a numeric NA value
NA_real_
# Specify a complex number NA value
NA_complex_
# Specify a integer number NA value
NA_integer_
# Specify a character NA value
NA_character_

# NA gives a logical type when evaluated alone
class(NA)
# NA_real_ is numeric
class(NA_real_)
```

### Ääretön ja miinus ääretön

R:ssä on myös ääretön ja miinus ääretön. Ne on toteutettu samaan tapaan kuin puuttuva arvo, mutta niiden tarkasteluun on omat funktionsa. Ääretön ja miinus ääretön arvot syntyvät esimerkiksi silloin, kun nollasta poikkeavia lukuja jaetaan nollalla.

```{r}
# You can type in infinity or minus infinity if needed
x <- c(1, 2, Inf, 5, -Inf)
# Use is.finite to determine if numbers are finite or not
is.finite(x)

# Division by zero makes Inf or -Inf (unless 0/0)
x_div_zero <- c(1, 2, -3) / c(3, 0, 0)
x_div_zero
is.finite(x_div_zero)
```

### Ei-numero

Mikäli R:ssä sattuu tekemään jonkin matemaattisen toimenpiteen, joka ei ole sallittu, esimerkiksi nollan jaon nollalla tai luvun $-1$ logaritmin, niin tämä tuottaa R:ssä tietotyypin, joka on `NaN` (lyhenne sanoista Not a Number). Mikäli `NaN`-arvoa tutkii funktiolla `is.finite` tai `is.na`, niin huomaa että `NaN` ei ole äärellinen ja `NaN` tulkitaan `NA`:ksi.

```{r}
x_div_zero_by_zero <- 0/0

# Tests for NaN
is.nan(x_div_zero_by_zero)

# Tests if it is finite
is.finite(x_div_zero_by_zero)

# Tests if it is NA (missing)
is.na(x_div_zero_by_zero)
```

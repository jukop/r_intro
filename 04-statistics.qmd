# Tunnusluvut {#sec-statistics}

Tunnusluvut (statistics) ovat keskeinen osa tilastotiedettä. Tunnuslukujen avulla voidaan tiivistää ja tarkastella aineistoa. Tässä luvussa käsitellään tyypillisimpien tunnuslukujen laskemista aineistosta. Näitä tunnuslukuja voi sanoa myös empiirisiksi, koska ne on laskettu aineistosta.

## Sijaintia kuvaavat tunnusluvut

### Minimi ja maksimi

Minimi tarkoittaa aineiston pienintä arvoa kyseiselle muuttujalle. Maksimi on vastaavasti suurin arvo. Minimi ja maksimi ovat periaatteessa helppo laskea funktioiden `min` ja `max` avulla, mutta niihinkin liittyy pari pientä sudenkuoppaa. Funktiot `min` ja `max` hyväksyvät argumenteikseen vain numeerisia vektoreita.

```{r}
dat_for_loc <- c(-1.25, -4.1, 1.16, -3.05, 4.17, 0.73, -3.14, 3.39, -2.55, 0.4)
min(dat_for_loc)
max(dat_for_loc)
```

<!-- Santtu: pmin ja pmax on selitetty tässä oudosti, niiden pääasiallinen tarkoitus on laskea alkiokohtaisia minimejä ja maksimeja (tästähän niiden nimetkin tulevat, pointwise-minimum) eikä vain verrata vektoria lukuun -->
Joskus minimiä ja maksimia tarvitaan tilanteessa, jossa halutaan vaikkapa muuttaa kaikki negatiiviset arvot nolliksi (tai positiiviset). Tämä onnistuu helpoiten funktioiden `pmin` ja `pmax` avulla. Samalla tapaa, jos halutaan esimerkiksi muuttaa kaikki lukua 1 pienemmät luvut luvuksi 1, niin tämä onnistuu vaihtamalla toinen argumentti luvuksi 1.
```{r}
# We want to get rid of all values below 0 and make them 0
pmax(dat_for_loc, 0)
# Similar, but get rid of all values over 0
pmin(dat_for_loc, 0)
# We can do similar things to any limit, e.g. 1
pmin(dat_for_loc, 1)
```

Funktiota `pmin` ja `pmax` voi käyttää vieläkin yleisemmässä muodossa antamalla yksittäisen lukuarvon sijasta vektorin. Näitä emme käsittele tässä, mutta kiinnostuneet voivat kokeilla lisää itse.

### Keskiarvo

Keskiarvo saadaan laskemalla muuttujan kaikki havainnot yhteen ja jakamalla summa havaintojen määrällä. Esimerkiksi aineiston $1,2,3,4$ keskiarvo on $(1+2+3+4)/4 = 2.5$. Keskiarvoa satunnaismuuttujan $X$ havainnoille voidaan merkitä matemaattisesti seuraavasti:

$$
  \overline{x} = \frac1n \sum_{i=1}^n x_i = \frac{x_1+x_2+\dots+x_n}{n},
$$
missä merkintä $\overline{x}$ tarkoittaa keskiarvoa, $x_1,\ldots,x_n$ ovat havaintoja ja $n$ on havaintojen lukumäärä.

Keskiarvo voidaan laskea helposti funktiolla `mean`.
```{r}
tooth_length <- ToothGrowth$len
mean(tooth_length)
```

Mikäli muuttujassa on puuttuvia arvoja (`NA`) niin keskiarvoksi tulee oletusarvoisesti `NA`. Puuttuvat arvot voi jättää pois keskiarvon laskennasta antamalla funktiolle lisäargumentiksi `na.rm = TRUE`.

```{r}
# Create some data
dat_for_mean <- c(1, 2, NA, 4)
# Data with NA results mean with NA
mean(dat_for_mean)
# Leave NA-values out and calculate mean from the remaining ones
mean(dat_for_mean, na.rm = TRUE)
```

### Mediaani

Mediaani ilmaisee aineiston keskimmäisen havainnon. Toisin sanoen puolet havainnoista on mediaania suurempia ja puolet mediaania pienempiä. Esimerkiksi aineiston $1, 1, 2, 3, 5$ mediaani on $2$. Jos aineistossa on parillinen määrä lukuja, otetaan kaksi keskimmäistä ja lasketaan ne yhteen ja jaetaan kahdella (keskiarvo). Aineiston $3, 3, 5, 6, 7, 17$ mediaani on $(5 + 6) / 2 = 5.5$. Mediaani on helppoa laskea funktiolla `median`.


```{r}
# Let's think about median
dat_for_median <- c(7, 2, 3, 4, 1, 7, 0, 4, 3, 3, 2, 6)
dat_for_median
sort(dat_for_median) # Median would be the middle value in the arranged data, thus 3

# Getting median in R
median(dat_for_median)
```

### Kvantiilit

Mediaani siis kertoi kohdan, jossa 50 % aineistosta on pienenmpiä kuin kyseinen arvo. Entä jos haluamme luvun, jota pienempiä ovat vaikkapa 10 % aineiston havainnoista tai mikä tahansa muu osuus? Tällainen yleistys on nimeltään kvantiili. Joillakin kvantiileilla on erityisnimet. Ne ovat

 - mediaani (50 % aineistosta on tätä pienempiä)
 - alakvartiili (25 %)
 - yläkvartiili (75 %)
 - desiilit (10% välein)
    * 10 %:n desiili, 20 %:n desiili jne.

Haluamansa kvantiilin voi laskea funktiolla `quantile`. Jos haluat laskea 30 %:n kvantiilin, niin anna argumentille `probs` tätä vastaava suhteellinen osuus eli 0.30.

```{r}
quantile(dat_for_median, probs = 0.30)
```
`quantile`-funktiolle voi antaa useita kvantiileita laskettavaksi kerralla. Tällöin argumentille `probs` on annettava vektori. Esimerkiksi kvartiilit ja mediaanin voi laskea samanaikaisesti näin:

```{r}
quantile(dat_for_median, probs = c(0.25, 0.5, 0.75))
```
Ääritapauksena voidaan havaita, että laskemalla 0 %:n ja 100 %:n kvantiilit saadaan tulokseksi minimi ja maksimi (yksikään arvo ei ole minimiä pienempi eikä yksikään maksimia suurempi. Samaan lopputulokseen pääsee myös funktiolla `range`. Kokeillaan tätä
```{r}
# 0 % and 100 % quantile gives a range of the data
quantile(dat_for_median, probs = c(0.00, 1.00))

# Let's compare with min and max
min(dat_for_median)
max(dat_for_median)

# There is also function called range
range(dat_for_median)
```
Esimerkiksi viiksilaatikkokuvaa vastaavat lukuarvot eli minimin, alakvartiilin, mediaanin, yläkvartiilin ja maksimin saa kätevästi quantile-funktiolla antamalla `probs`-argumentille vektorin `c(0, 0.25, 0.5, 0.75, 1)`. Tätä sanotaan joskus viiden numeron yhteenvedoksi.

```{r}
quantile(dat_for_median, probs = c(0, 0.25, 0.5, 0.75, 1))
```

### Moodi

Moodi ilmaisee muuttujan yleisimmän arvon. Valitettavasti R:ssä ei ole valmista funktiota moodin laskemiseen. Sen sijaan funktio nimeltään `mode` antaa objektin tyypin, eikä laske moodia. Jos moodin haluaa laskea R:ssä, on ensin muodostettava aineistosta frekvenssitaulukko ja sitten etsittävä taulokosta se arvo, josta on eniten havaintoja, eli suurin frekvenssi
```{r}
# Find out the mode
dat_for_mode <- c(
  7, 2, 3, 4, 1, 7, 0, 4, 3, 3, 2, 6, 1, 3, 3, 1, 6, 0, 1, 3, 
  0, 6, 4, 2, 3, 2, 2, 7, 3, 1, 5, 3, 4, 3, 3, 2, 2, 4, 2, 1, 
  5, 3, 2, 2, 2, 3, 4, 2, 5, 3, 4, 2, 1, 4, 2, 3, 1, 1, 4, 3, 
  2, 3, 5, 4, 4, 4, 1, 3, 1, 3, 5, 2, 3, 1, 4, 2, 4, 2, 1, 0, 
  3, 3, 3, 3, 4, 4, 4, 3, 4, 4, 2, 1, 2, 4, 4, 4, 6, 2, 3, 2
)
tab <- table(dat_for_mode)
# Let's see how is tab
tab
# Let's pick up the largest frequency using which.max function
tab[which.max(tab)]
# Mode is 3 and the frequency is 26
# Let's pick up only the value 3
names(tab)[which.max(tab)]
# That is character so let's convert it to numeric
as.numeric(names(tab)[which.max(tab)])
```

Ylläoleva on hyvä esimerkki tilanteesta, jossa moodin laskemiseen käytetty koodi on kätevä kirjoittaa funktioksi, jolloin moodi on helppo laskea jatkossa toisilla aineistoilla. Funktiohin palataan osiossa [Funktiot](#sec-functions). Alla on joka tapauksessa esimerkki moodi-funktiosta ilman suurempia selityksiä. **Huom!** tämä moodi-funktio toimii vain numeerisille vektoreille!

```{r}
# Write a function for mode
moodi <- function(x) {
  tab <- table(x)
  as.numeric(names(tab)[which.max(tab)])
}
# Use that function
moodi(dat_for_mode)
# NOTE! This only works for numeric data!
dat_for_mode_character <- c("a", "a", "a", "b", "c", "c")
# This gives NA as output and a warning!
moodi(dat_for_mode_character)
```


## Vaihtelua kuvaavat tunnusluvut

### Varianssi ja keskihajonta

Yksittäiselle numeeriselle muuttujalle voidaan laskea varianssi (*variance*) funktiolla `var`. Varianssia tulkittaessa kannattaa muistaa, että varianssin mittayksikkö ei ole sama kuin alkuperäisen muuttujan, vaan mittayksikkö tulee korottaa toiseen potenssiin. Esim. jos pituuden yksikkö on cm, niin pituuden varianssin yksikkö on $\text{cm}^2$. Käytännössä tulkintaa kannattaa yrittää keskihajonnan avulla.
```{r}
# pull the variable from data frame and use it directly in function var
var(ToothGrowth$len)

# calculate the variance-covariance matrix for entire data frame 
# (gives NA to any pairs with categorical variables)
# variances are obtained from the diagonal (58.51, NA, 0.3954)
var(ToothGrowth)
```

Keskihajonta (*standard deviation*) saadaan vastaavasti funktiolla `sd`. Keskihajonta on varianssin neliöjuuri.
```{r}
# standard deviation
sd(ToothGrowth$len)
```

### Korrelaatio

Korrelaatio (*correlation*) on suure jolla voidaan mitata kahden muuttujan välistä riippuvuutta. Korrelaatiolle on monia erilaisia mittareita, joista yleisimmät ovat Pearsonin korrelaatiokerroin, joka mittaa kahden muuttujan välistä lineaarista riippuvuutta, ja Spearmanin järjestyskorrelaatiokerroin, joka mittaa kahden muuttujan välistä riippuvuutta ilman lineaarisuusoletusta, mutta olettaa kuitenkin monotonisen riippuvuuden. HUOM: korrelaatio ei ota kantaa siihen, kuinka vahva riippuvuus on (käyrän jyrkkyys), vaan pelkästään siihen, kuinka systemaattinen riippuvuus on. Kummatkin korrelaatiokertoimet saavat arvoja väliltä [-1, 1], jossa -1 on täydellinen negatiivinen korrelaatio (toisen muuttujan kasvaessa toinen aina pienenee) ja 1 on täydellinen positiivinen korrelaatio.

Korrelaation kahden vektorin välillä voi R:ssä laskea funktiolla `cor`. Otetaan esimerkiksi R:n sisäinen aineisto `Indometh`, jossa on mitattu indometasiinin farmakokinetiikkaa, ja selvitetään ajan ja indometasiinin konsentraation väliselle riippuvuudelle Pearsonin ja Spearmanin korrelaatiokertoimet. Piirretään sen jälkeen hajontakuvio mittaustuloksista ja lisätään kuvaajaan alaotsikoksi korrelaatiokertoimet. Tutustumme samalla funktioon `round`, jolla voi pyöristää lukuja halutulle desimaalitarkkuudelle. Huomaa, että `round`-funktio pyöristää aina lähimpään parilliseen lukuun, esim. luku 0.5 pyöristyy lukuun 0, mutta 1.5 pyöristyy lukuun 2. Funktio `mtext` lisää tekstin kuvaajan marginaaliin.

```{r}
# Pearson correlation
pearson <- cor(Indometh$time, Indometh$conc, method = "pearson")
# Spearman correlation
spearman <- cor(Indometh$time, Indometh$conc, method = "spearman")
# Scatter plot
plot(
  Indometh$time, 
  Indometh$conc,
  xlab = "Time", 
  ylab = "Concetration",
  main = "Pharmacokinetics of indometacin"
)

# Paste concatenates strings
subtitle <- paste(
  "Pearson correlation:", round(pearson, digits = 2),
  "Spearman correlation:", round(spearman, digits = 2)
)
# Add subtitle to plot
mtext(subtitle)
```

Tässä esimerkissä nähdään hyvin Pearsonin ja Spearmanin korrelaatiokertoimien ero. Koska Indometasiinin konsentraatio laskee eksponentiaalisesti, ei lineaarisesti, Pearsonin korrelaatiokerroin on "vain" -0.7, kun taas Spearmanin korrelaatiokerroin -0.97 vastaa lähes täydellistä negatiivista korrelaatiota.

## Yhteenveto aineistosta (summary)

Kätevä tapa saada nopea yhteenveto datakehikon kaikista muuttujista on soveltaa `summary`-funktiota datakehikkoon.

```{r}
# Calculate summary for ToothGrowth data
summary(ToothGrowth)
```

`summary` huolii myös yksittäisen vektorin, jolloin yhteenveto tulostuu vaakasuuntaisena.

```{r}
tooth_length <- ToothGrowth$len
summary(tooth_length)
```


## Uniikit arvot

Usein on tarpeen tietää jonkin tarkasteltavan muuttujan saamat uniikit arvot aineistossa, esimerkiksi kun halutaan määrittää faktorin tasot. Tätä varten R:ssä on funktio `unique`, joka kertoo vektorin uniikit arvot.

```{r}
x <- c(1, 1, 1, 2, 3, 3, 4, 5, 5)
unique(x)
```

Uniikkien arvojen lukumäärän saa helposti käyttämällä lisäksi `length` funktiota

```{r}
length(unique(x))
```
Vektorissamme `x` oli siis 5 uniikkia arvoa.

## Tunnuslukujen laskeminen ryhmittäin

Jos kiinnostuksen kohteena on vertailla ryhmiä toisiinsa esimerkiksi keskiarvon suhteen, on keskiarvot laskettava joka ryhmälle. Tämä voidaan tehdä esimerkiksi `tapply` funktiolla:

```{r}
tapply(ToothGrowth$len, ToothGrowth$dose, mean)
```
Funktion ensimmäinen argumentti vektori vastemuuttujan arvoista, joista olemme kiinnostuneita (tässä tapauksessa R:n sisäisen aineiston `ToothGrow` hampaiden pituuskasvumittaukset `len`). Toinen argumentti on vektori, joka kertoo mihin ryhmään kukin ensimmäisen argumentin arvoista kuuluu (tässä tapauksessa C-vitamiiniannos `dose`, annoskoot: 0.5, 1, ja 2 mg/vuorokausi). Kolmas argumentti määrittää funktion, jota sovelletaan joka ryhmässä erikseen (tässä tapauksessa keskiarvofunktio `mean`, mutta tämä voi olla mikä tahansa tunnusluku). Lasketut tunnusluvut palautetaan vektorina ryhmiä vastaavassa järjestyksessä.
